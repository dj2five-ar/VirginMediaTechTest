@model SalesDataViewModel

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Sales Data Upload</h4>
            </div>
            <div class="card-body">
                <form method="post" enctype="multipart/form-data" asp-controller="Home" asp-action="Upload">
                    <div class="mb-3">
                        <label for="file" class="form-label">Upload CSV File</label>
                        <input type="file" class="form-control" id="file" name="file" accept=".csv">
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5 class="mb-0">Filter Sales Records</h5>
            </div>
            <div class="card-body">
                <form id="filterForm" class="row g-3">
                    <div class="col-md-4">
                        <label for="segmentFilter" class="form-label">Segment</label>
                        <select id="segmentFilter" class="form-select">
                            <option value="">All Segments</option>
                            @foreach (var segment in Model.Segments)
                            {
                                <option value="@segment">@segment</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="countryFilter" class="form-label">Country</label>
                        <select id="countryFilter" class="form-select">
                            <option value="">All Countries</option>
                            @foreach (var country in Model.Countries)
                            {
                                <option value="@country">@country</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="productFilter" class="form-label">Product</label>
                        <select id="productFilter" class="form-select">
                            <option value="">All Products</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product">@product</option>
                            }
                        </select>
                    </div>
                    <div class="col-12">
                        <button type="button" id="applyFilters" class="btn btn-primary">Apply Filters</button>
                        <button type="button" id="resetFilters" class="btn btn-secondary">Reset</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-9">
        <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center">
                <button id="toggleSalesTable" class="btn btn-sm btn-outline-primary me-2">
                    <i id="toggleIcon" class="bi bi-chevron-down"></i>
                </button>
                <h5 class="mb-0">Sales Records</h5>
                <span class="badge bg-primary" id="recordCount">@Model.SalesData.Count records</span>
            </div>
            <div class="card-body" id="salesTableContainer" style="display: none;">
                <div class="table-responsive">
                    <table id="salesTable" class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Segment</th>
                                <th>Country</th>
                                <th>Product</th>
                                <th>Discount</th>
                                <th>Units Sold</th>
                                <th>Mfg Price</th>
                                <th>Sale Price</th>
                                <th>Profit</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var record in Model.SalesData)
                            {
                                <tr class="sales-row"
                                    data-segment="@record.Segment"
                                    data-country="@record.Country"
                                    data-product="@record.Product">
                                    <td>@record.Date.ToString("dd/MM/yyyy")</td>
                                    <td>@record.Segment</td>
                                    <td>@record.Country</td>
                                    <td>@record.Product</td>
                                    <td>@record.DiscountBand</td>
                                    <td>@record.UnitsSold.ToString()</td>
                                    <td>£@record.ManufacturingPrice.ToString()</td>
                                    <td>£@record.SalePrice.ToString()</td>
                                    <td>£@record.Profit.ToString()</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="mb-0">Summary</h5>
            </div>
            <div class="card-body">
                <table class="table">
                    <tbody>
                        <tr class="fw-bold">
                            <td>Total Units Sold:</td>
                            <td id="totalUnits" class="text-end">@Model.TotalUnitsSold.ToString()</td>
                        </tr>
                        <tr class="fw-bold">
                            <td>Total Revenue:</td>
                            <td id="totalRevenue" class="text-end">£@Model.TotalRevenue.ToString()</td>
                        </tr>
                        <tr class="fw-bold">
                            <td>Total Profit:</td>
                            <td id="totalProfit" class="text-end">£@Model.TotalProfit.ToString()</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const salesRows = document.querySelectorAll('.sales-row');
            const segmentFilter = document.getElementById('segmentFilter');
            const countryFilter = document.getElementById('countryFilter');
            const productFilter = document.getElementById('productFilter');
            const applyFiltersBtn = document.getElementById('applyFilters');
            const resetFiltersBtn = document.getElementById('resetFilters');
            const recordCount = document.getElementById('recordCount');
            const totalUnits = document.getElementById('totalUnits');
            const totalRevenue = document.getElementById('totalRevenue');
            const totalProfit = document.getElementById('totalProfit');
            const toggleSalesTable = document.getElementById('toggleSalesTable');
            const salesTableContainer = document.getElementById('salesTableContainer');
            const toggleIcon = document.getElementById('toggleIcon');

            toggleSalesTable.addEventListener('click', function() {
                if (salesTableContainer.style.display === 'none') {
                    salesTableContainer.style.display = 'block';
                    toggleIcon.className = 'bi bi-chevron-up';
                } else {
                    salesTableContainer.style.display = 'none';
                    toggleIcon.className = 'bi bi-chevron-down';
                }
            });

            applyFiltersBtn.addEventListener('click', filterTable);

            resetFiltersBtn.addEventListener('click', function() {
                segmentFilter.value = '';
                countryFilter.value = '';
                productFilter.value = '';
                filterTable();
            });

            function filterTable() {
                const selectedSegment = segmentFilter.value;
                const selectedCountry = countryFilter.value;
                const selectedProduct = productFilter.value;

                let visibleCount = 0;
                let totalUnitsValue = 0;
                let totalRevenueValue = 0;
                let totalProfitValue = 0;

                salesRows.forEach(row => {
                    const segment = row.getAttribute('data-segment');
                    const country = row.getAttribute('data-country');
                    const product = row.getAttribute('data-product');

                    const matchesSegment = selectedSegment === '' || segment === selectedSegment;
                    const matchesCountry = selectedCountry === '' || country === selectedCountry;
                    const matchesProduct = selectedProduct === '' || product === selectedProduct;

                    const isVisible = matchesSegment && matchesCountry && matchesProduct;

                    row.style.display = isVisible ? '' : 'none';

                    if (isVisible) {
                        visibleCount++;

                        const unitsSold = parseFloat(row.cells[5].textContent.replace(',', ''));
                        const revenue = parseFloat(row.cells[7].textContent.replace('£', '').replace(',', ''));
                        const profit = parseFloat(row.cells[8].textContent.replace('£', '').replace(',', ''));

                        totalUnitsValue += unitsSold;
                        totalRevenueValue += (revenue * unitsSold);
                        totalProfitValue += profit;
                    }
                });

                recordCount.textContent = `${visibleCount} records`;
                totalUnits.textContent = totalUnitsValue.toLocaleString('en-GB', { minimumFractionDigits: 1, maximumFractionDigits: 1 });
                totalRevenue.textContent = `£${totalRevenueValue.toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                totalProfit.textContent = `£${totalProfitValue.toLocaleString('en-GB', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            }
        });
    </script>
}
